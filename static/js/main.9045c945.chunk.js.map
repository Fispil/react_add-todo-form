{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","title","completed","classNames","TodoList","todos","map","getUserById","userId","usersFromServer","find","todoListWithUsers","App","useState","setTodos","todoTitle","setTodoTitle","selectedUserId","setSelectedUserId","titleError","setTitleError","userError","setUserError","action","method","onSubmit","event","preventDefault","trim","newTodo","todoIds","Math","max","generateTodoId","listOfTodos","type","value","placeholder","onChange","target","disabled","person","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9045c945.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { User } from '../../types/User';\n\ninterface Props {\n  user: User;\n}\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { email, name } = user;\n\n  return (\n    <a className=\"UserInfo\" href={(`mailto:${email}`)}>\n      {name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ninterface Props {\n  todo: Todo;\n}\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <article\n      key={todo.id}\n      data-id={todo.id}\n      className={\n        classNames(\n          'TodoInfo',\n          { 'TodoInfo--completed': completed },\n        )\n      }\n    >\n      <h2 className=\"TodoInfo__title\">{title}</h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo todo={todo} key={todo.id} />\n      ))}\n    </section>\n  );\n};\n","import './App.scss';\n\nimport { useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\n\nconst getUserById = (userId: number) => {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n};\n\nconst todoListWithUsers: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nexport const App = () => {\n  const [todos, setTodos] = useState(todoListWithUsers);\n  const [todoTitle, setTodoTitle] = useState('');\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [titleError, setTitleError] = useState(false);\n  const [userError, setUserError] = useState(false);\n\n  const user = getUserById(selectedUserId);\n\n  const handleFormSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setTitleError(!todoTitle);\n    setUserError(!selectedUserId);\n\n    if (!todoTitle && !selectedUserId) {\n      return;\n    }\n\n    const generateTodoId = () => {\n      const todoIds = todos.map(todo => todo.id);\n\n      return Math.max(...todoIds) + 1;\n    };\n\n    setTodoTitle(todoTitle.trim());\n\n    const newTodo: Todo = {\n      id: generateTodoId(),\n      title: todoTitle,\n      userId: selectedUserId,\n      completed: false,\n      user,\n    };\n\n    if (todoTitle && selectedUserId) {\n      setTodos(listOfTodos => [...listOfTodos, newTodo]);\n      setTodoTitle('');\n      setSelectedUserId(0);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleFormSubmit}\n      >\n        <label>\n          <div className=\"field\">\n            <input\n              type=\"text\"\n              data-cy=\"titleInput\"\n              value={todoTitle}\n              placeholder=\"Please enter a title\"\n              onChange={(event) => {\n                setTodoTitle(event.target.value);\n              }}\n            />\n            {!todoTitle.trim() && titleError && (\n              <span className=\"error\">Please enter a title</span>\n            )}\n          </div>\n        </label>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            value={selectedUserId}\n            onChange={event => {\n              setSelectedUserId(+event.target.value);\n            }}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map(person => (\n              <option value={person.id} key={person.id}>\n                {person.name}\n              </option>\n            ))}\n          </select>\n\n          {!selectedUserId && userError && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}